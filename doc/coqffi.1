.\" Pipe this output to groff -m man -K utf8 -T utf8 | less -R
.\"
.mso an.tmac
.TH "COQFFI" 1 "" "Coqffi coqffi.dev" "Coqffi Manual"
.\" Disable hyphenation and ragged-right
.nh
.ad l
.SH NAME
.P
coqffi \N'45' Coq/OCAML FFI made easy
.SH SYNOPSIS
.P
\fBcoqffi\fR [\fIOPTION\fR]… \fIINPUT\fR
.SH DESCRIPTION
.P
\fBcoqffi\fR automatically generates FFI bindings to OCaml libraries\N'46' More precisely, \fBcoqffi\fR generates the necessary boilerplate for a Coq development to use the functions and types described in an OCaml module interface (\fB\N'46'mli\fR)\N'46'
.SH ARGUMENTS
.TP 4
\fIINPUT\fR (required)
The compiled interface (\fB\N'46'cmi\fR) of the OCaml module to be used in Coq
.SH OPTIONS
.TP 4
\fB\N'45'a\fR \fIALIASES\fR, \fB\N'45'\N'45'aliases\fR=\fIALIASES\fR
A configuration file containing aliases
.TP 4
\fB\N'45'f\fR \fIFEATURE\fR
Enable (using \fB\N'45'f\fR\fIfeature\N'45'name\fR) or disable (using \fB\N'45'fno\N'45'\fR\fIfeature\N'45'name\fR) the feature called \fIfeature\N'45'name\fR\N'46' This option can be used several times (to enable or disable several features)\N'46' If it is used several times for the same feature, then a warning is emitted, and the first occurence is used\N'46' See \fBFEATURES\fR for a comprehensive list of the features available\N'46'
.TP 4
\fB\N'45'I\fR \fIWITNESS\fR, \fB\N'45'\N'45'include\N'45'types\fR=\fIWITNESS\fR
A witness file which contains a list of translation types
.TP 4
\fB\N'45'\N'45'lwt\N'45'alias\fR=\fILWT ALIAS\fR
The alias to Lwt\N'46't used in the OCaml module
.TP 4
\fB\N'45'o\fR \fIOUTPUT\fR, \fB\N'45'\N'45'output\fR=\fIOUTPUT\fR
The path of the Coq module to generate
.TP 4
\fB\N'45'r\fR \fIMODULE\fR, \fB\N'45'\N'45'require\fR=\fIMODULE\fR
Coq fully qualified modules to be required prior to defining the bindings\N'46' This can be used in conjunction with the \fIcoq_model\fR attribute, where a binding is not introduced by an axiom, but rather as an alias for an already existing Coq term\N'46'
.TP 4
\fB\N'45'\N'45'tezos\N'45'contexts\fR=\fITEZOS TYPES\fR
Names of the context types to consider for impurity when the \fBtezos\fR feature is enabled\N'46'
.TP 4
\fB\N'45'w\fR, \fB\N'45'\N'45'witness\fR
When this flag is set, \fBcoqffi\fR generates an auxiliary file in addition to the Coq module\N'46' This file contains a summary of the type introduced by the generated module, and is a suitable input file for the \fB\N'45'I\fR option\N'46' The name of the auxiliary file is derived from the \fBoutput\fR options (the \fI\N'46'ffi\fR extension is used in place of \fI\N'46'v\fR)\N'46'
.SH FEATURES
.P
\fBtransparent\N'45'types\fR
.sp -1
.TP 4
\fBno\N'45'transparent\N'45'types\fR
By default, \fBcoqffi\fR considers any types introduced by an OCaml module as opaque\N'46' If \fB\N'45'ftransparent\N'45'types\fR is used, then \fBcoqffi\fR will try to translate some OCaml type definition into a compatible Coq counterpart\N'46' \fBWarning:\fR This feature is experimental, and may lead to the generation of invalid Coq types\N'46' Typically, it does not enforce the “strict\N'45'positive occurence” constraints of Coq constructors\N'46' Moreover, records generated by Coq should not be pattern\N'45'matched, and Coq will generate ill\N'45'formed OCaml code if so\N'46'
.P
\fBpure\N'45'module\fR
.sp -1
.TP 4
\fBno\N'45'pure\N'45'module\fR
By default, \fBcoqffi\fR considers OCaml functions are impure, and let users marked “pure functions” with the \fIpure\fR attribute\N'46' If \fB\N'45'ftransparent\N'45'types\fR is used, then \fBcoqffi\fR will consider all OCaml values listed in the \fIINPUT\fR module are pure\N'46'
.P
\fBsimple\N'45'io\fR
.sp -1
.TP 4
\fBno\N'45'simple\N'45'io\fR
By default, \fBcoqffi\fR uses the \fIIO\fR monad provided by the \fBcoq\N'45'simple\N'45'io\fR package to model impure computations\N'46' One can disable the generation of \fBcoq\N'45'simple\N'45'io\fR\N'39's helpers with \fB\N'45'fno\N'45'\fR\fIsimple\N'45'io\fR\N'46'
.P
\fBinterface\fR
.sp -1
.TP 4
\fBno\N'45'interface\fR
When the \fBinterface\fR feature is enabled, \fB coqffi\fR generates a parameterized inductive type which describes the set of impure primitives provided by the module\N'46' This type can be used with the monads of verification frameworks such as Interaction Tree or FreeSpec\N'46' It is disabled by default\N'46'
.P
\fBfreespec\fR
.sp -1
.TP 4
\fBno\N'45'freespec\fR
When the \fBfreespec\fR feature is enabled, \fBcoqffi\fR generates a FreeSpec semantics for the interface generated by the \fBinterface\fR feature (which means said feature needs to be enabled)\N'46' It is disable by default\N'46'
.P
\fBlwt\fR
.sp -1
.TP 4
\fBno\N'45'lwt\fR
When the \fBlwt\fR feature is enabled, \fBcoqffi\fR reserved a special treatment to values of type \fILwt\N'46't\fR\N'46' They are marked as “asynchronous primitives,” and are gathered in a dedicated typeclass\N'46' The name of the \fBLwt\fR type can be changed using the \fB\N'45'\N'45'lwt\N'45'alias\fR option, and using this option enables the \fBlwt\fR feature\N'46' The \fB\N'45'r\fR option is expected to be use to make a type \fILwt\N'46't\fR available to the generated Coq module\N'46' It is disabled by default\N'46'
.P
\fBtezos\fR
.sp -1
.TP 4
\fBno\N'45'tezos\fR
When the \fBtezos\fR feature is enabled, \fBcoqffi\fR assumes that functions which takes an argument of type \fIRaw_context\N'46't\fR and \fIAlpha_context\N'46't\fR are impure, even if the \fBpure\N'45'module\fR feature is enabled\N'46' It is disabled by default
.SH SUPPORTED TYPES
.P
In addition to types introduced in the input module, \fBcoqffi\fR supports the following base types:
.P
.nf
  \N'45' \fBbool\fR
.fi
.sp -1
.P
.nf
  \N'45' \fBchar\fR
.fi
.sp -1
.P
.nf
  \N'45' \fBint\fR
.fi
.sp -1
.P
.nf
  \N'45' \fI\N'39'a1\fR * \N'46'\N'46' * \fI \N'39'an\fR with \fI n\fR <= 20
.fi
.sp -1
.P
.nf
  \N'45' \fI\N'39'a\fR \fBlist\fR
.fi
.sp -1
.P
.nf
  \N'45' \fI\N'39'a\fR \fBStdlib\N'46'Seq\N'46't\fR
.fi
.sp -1
.P
.nf
  \N'45' \fI\N'39'a\fR \fBoption\fR
.fi
.sp -1
.P
.nf
  \N'45' (\fI\N'39'a\fR, \fI \N'39'e\fR) \fBresult\fR
.fi
.sp -1
.P
.nf
  \N'45' \fBstring\fR
.fi
.sp -1
.P
.nf
  \N'45' \fBunit\fR
.fi
.sp -1
.P
.nf
  \N'45' \fBexn\fR
.fi
.P
Besides, \fBcoqffi\fR also supports extending the \fBexn\fR type, using the \fIexception \fR\fBFoo\fR\fI of \fR \fBbar\fR construction\N'46' In such a case, \fBcoqffi\fR will generate a “proxy” inductive type \fBFooExn\fR, along with conversion functions from and to \fBexn\fR\N'46'
.SH COMMON OPTIONS
.TP 4
\fB\N'45'\N'45'help\fR[=\fIFMT\fR] (default=\fBauto\fR)
Show this help in format \fIFMT\fR\N'46' The value \fIFMT\fR must be one of \fBauto\fR, \fBpager\fR, \fBgroff\fR or \fBplain\fR\N'46' With \fBauto\fR, the format is \fBpager\fR or \fBplain\fR whenever the \fBTERM\fR env var is \fBdumb\fR or undefined\N'46'
.TP 4
\fB\N'45'\N'45'version\fR
Show version information\N'46'
.SH EXIT STATUS
.P
\fBcoqffi\fR exits with the following status:
.TP 4
0
on success\N'46'
.TP 4
123
on indiscriminate errors reported on standard error\N'46'
.TP 4
124
on command line parsing errors\N'46'
.TP 4
125
on unexpected internal errors (bugs)\N'46'
.SH BUGS
.P
Email bug reports to <lthms at soap\N'46'coffee>\N'46'